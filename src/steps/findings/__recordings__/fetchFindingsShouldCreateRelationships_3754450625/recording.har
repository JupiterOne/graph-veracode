{
  "log": {
    "_recordingName": "fetchFindingsShouldCreateRelationships",
    "creator": {
      "comment": "persister:JupiterOneIntegationFSPersister",
      "name": "Polly.JS",
      "version": "5.1.1"
    },
    "entries": [
      {
        "_id": "420505c577e907cea41ad3c7a8a99767",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "user-agent",
              "value": "got (https://github.com/sindresorhus/got)"
            },
            {
              "name": "authorization",
              "value": "[REDACTED]"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "host",
              "value": "api.veracode.com"
            }
          ],
          "headersSize": 392,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [
            {
              "name": "name",
              "value": "US1492-1"
            }
          ],
          "url": "https://api.veracode.com/appsec/v1/applications?name=US1492-1"
        },
        "response": {
          "bodySize": 2561,
          "content": {
            "mimeType": "application/json",
            "size": 2561,
            "text": "{\n  \"_embedded\" : {\n    \"applications\" : [ {\n      \"id\" : 1355555,\n      \"oid\" : 90207,\n      \"last_completed_scan_date\" : \"2022-03-01T13:46:30.000Z\",\n      \"guid\" : \"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\n      \"created\" : \"2022-02-17T16:22:38.000Z\",\n      \"modified\" : \"2022-03-01T13:46:35.000Z\",\n      \"app_profile_url\" : \"HomeAppProfile:90207:1355555\",\n      \"scans\" : [ {\n        \"scan_type\" : \"STATIC\",\n        \"status\" : \"PUBLISHED\",\n        \"modified_date\" : \"2022-03-01T13:46:30.000Z\",\n        \"scan_url\" : \"StaticOverview:90207:1355555:17037990:17010336:17025986\",\n        \"internal_status\" : \"resultsready\",\n        \"links\" : [ ]\n      } ],\n      \"profile\" : {\n        \"name\" : \"US1492-1\",\n        \"tags\" : \"Other\",\n        \"business_unit\" : {\n          \"id\" : 99772,\n          \"name\" : \"Not Specified\",\n          \"guid\" : \"953e32f6-d874-4c83-a173-c0b193b57d6a\"\n        },\n        \"business_owners\" : [ ],\n        \"archer_app_name\" : null,\n        \"policies\" : [ {\n          \"guid\" : \"c8ffa32c-58fa-48a3-9d53-e4cbf7d29283\",\n          \"name\" : \"Veracode Recommended Very High\",\n          \"is_default\" : true,\n          \"policy_compliance_status\" : \"DID_NOT_PASS\"\n        } ],\n        \"teams\" : [ ],\n        \"custom_fields\" : null,\n        \"description\" : null,\n        \"settings\" : {\n          \"nextday_consultation_allowed\" : false,\n          \"static_scan_xpa_or_dpa\" : true,\n          \"dynamic_scan_approval_not_required\" : false,\n          \"sca_enabled\" : false\n        },\n        \"business_criticality\" : \"VERY_HIGH\"\n      },\n      \"results_url\" : \"ViewReportsResultSummary:90207:1355555:17037990\",\n      \"_links\" : {\n        \"self\" : {\n          \"href\" : \"https://api.veracode.com/appsec/v1/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb\"\n        },\n        \"sandboxes\" : {\n          \"href\" : \"https://api.veracode.com/appsec/v1/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/sandboxes{?page,size}\",\n          \"templated\" : true\n        },\n        \"policy\" : {\n          \"href\" : \"https://api.veracode.com/appsec/v1/policies/c8ffa32c-58fa-48a3-9d53-e4cbf7d29283\"\n        }\n      }\n    } ]\n  },\n  \"_links\" : {\n    \"self\" : {\n      \"href\" : \"https://api.veracode.com/appsec/v1/applications/?name=US1492-1{&page,size,org,policy_id,policy_guid,legacy_id,business_unit,tag,policy,policy_compliance,scan_status,scan_type,modified_after,team,custom_field_names,custom_field_values,sort_by_custom_field_name}\",\n      \"templated\" : true\n    }\n  },\n  \"page\" : {\n    \"size\" : 50,\n    \"total_elements\" : 1,\n    \"total_pages\" : 1,\n    \"number\" : 0\n  }\n}"
          },
          "cookies": [],
          "headers": [
            {
              "name": "cache-control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "date",
              "value": "Tue, 15 Mar 2022 21:30:03 GMT"
            },
            {
              "name": "expires",
              "value": "0"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "server",
              "value": "Unknown"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000 ; includeSubDomains"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-conversation-id",
              "value": "35ef0e71-72de-4b5a-bf1f-a5de91893b59"
            },
            {
              "name": "x-frame-options",
              "value": "DENY"
            },
            {
              "name": "x-newrelic-app-data",
              "value": "PxQGU1RaCgIIR1JQBQkGVVAHFB9AMQYAZBBZDEtZV0ZaClc9HjJDEA1YUCIJDUxBXwgNB0VtGAcUQUVWATpMFAE+FwNISFhbUARNCF4PQEJMcXI1T0EUAx5UTVIZAQ9XUQADC05LUk4SA1lbCA0HUQtSW1YBUwUGBRQbBwcPS1Zt"
            },
            {
              "name": "x-xss-protection",
              "value": "1; mode=block"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "Close"
            }
          ],
          "headersSize": 634,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2022-03-15T21:30:03.427Z",
        "time": 361,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 361
        }
      },
      {
        "_id": "0b53d765c30bd7ed25f5c5f0ae5c936c",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "user-agent",
              "value": "got (https://github.com/sindresorhus/got)"
            },
            {
              "name": "authorization",
              "value": "[REDACTED]"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "host",
              "value": "api.veracode.com"
            }
          ],
          "headersSize": 471,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [
            {
              "name": "violates_policy",
              "value": "true"
            },
            {
              "name": "size",
              "value": "500"
            },
            {
              "name": "scan_type",
              "value": "STATIC"
            }
          ],
          "url": "https://api.veracode.com/appsec/v2/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/findings?violates_policy=true&size=500&scan_type=STATIC"
        },
        "response": {
          "bodySize": 33551,
          "content": {
            "mimeType": "application/json",
            "size": 33551,
            "text": "{\"_embedded\":{\"findings\":[{\"issue_id\":1,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/113.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":113,\"name\":\"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/113\"},\"file_path\":\"/lessons/ConfManagement/config.jsp\",\"file_name\":\"config.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":50,\"finding_category\":{\"id\":21,\"name\":\"CRLF Injection\",\"href\":\"https://api.veracode.com/appsec/v1/categories/21\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.lessons.ConfManagement.config_jsp._jspService\",\"exploitability\":1,\"attack_vector\":\"javax.servlet.http.HttpServletResponse.sendRedirect\",\"file_line_number\":10},\"build_id\":17037990},{\"issue_id\":2,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. </span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/601.html\\\">CWE</a> <a href=\\\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\\\">OWASP</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":601,\"name\":\"URL Redirection to Untrusted Site ('Open Redirect')\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/601\"},\"file_path\":\"/lessons/ConfManagement/config.jsp\",\"file_name\":\"config.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":50,\"finding_category\":{\"id\":25,\"name\":\"Insufficient Input Validation\",\"href\":\"https://api.veracode.com/appsec/v1/categories/25\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.lessons.ConfManagement.config_jsp._jspService\",\"exploitability\":1,\"attack_vector\":\"javax.servlet.http.HttpServletResponse.sendRedirect\",\"file_line_number\":10},\"build_id\":17037990},{\"issue_id\":3,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable menu. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/79.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/xss/\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":80,\"name\":\"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/80\"},\"file_path\":\"/main.jsp\",\"file_name\":\"main.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":55,\"finding_category\":{\"id\":20,\"name\":\"Cross-Site Scripting (XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/categories/20\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.main_jsp._jspService\",\"exploitability\":2,\"attack_vector\":\"javax.servlet.jsp.JspWriter.print\",\"file_line_number\":119},\"build_id\":17037990},{\"issue_id\":4,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. </span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/601.html\\\">CWE</a> <a href=\\\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\\\">OWASP</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":601,\"name\":\"URL Redirection to Untrusted Site ('Open Redirect')\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/601\"},\"file_path\":\"/lessons/General/redirect.jsp\",\"file_name\":\"redirect.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":53,\"finding_category\":{\"id\":25,\"name\":\"Insufficient Input Validation\",\"href\":\"https://api.veracode.com/appsec/v1/categories/25\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.lessons.General.redirect_jsp._jspService\",\"exploitability\":1,\"attack_vector\":\"javax.servlet.http.HttpServletResponse.sendRedirect\",\"file_line_number\":10},\"build_id\":17037990},{\"issue_id\":5,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable menu. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/79.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/xss/\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":80,\"name\":\"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/80\"},\"file_path\":\"/main.jsp\",\"file_name\":\"main.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":56,\"finding_category\":{\"id\":20,\"name\":\"Cross-Site Scripting (XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/categories/20\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.main_jsp._jspService\",\"exploitability\":2,\"attack_vector\":\"javax.servlet.jsp.JspWriter.print\",\"file_line_number\":124},\"build_id\":17037990},{\"issue_id\":6,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable menu. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/79.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/xss/\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":80,\"name\":\"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/80\"},\"file_path\":\"/main.jsp\",\"file_name\":\"main.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":58,\"finding_category\":{\"id\":20,\"name\":\"Cross-Site Scripting (XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/categories/20\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.main_jsp._jspService\",\"exploitability\":2,\"attack_vector\":\"javax.servlet.jsp.JspWriter.print\",\"file_line_number\":130},\"build_id\":17037990},{\"issue_id\":7,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/113.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":113,\"name\":\"Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/113\"},\"file_path\":\"/lessons/General/redirect.jsp\",\"file_name\":\"redirect.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":53,\"finding_category\":{\"id\":21,\"name\":\"CRLF Injection\",\"href\":\"https://api.veracode.com/appsec/v1/categories/21\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.lessons.General.redirect_jsp._jspService\",\"exploitability\":1,\"attack_vector\":\"javax.servlet.http.HttpServletResponse.sendRedirect\",\"file_line_number\":10},\"build_id\":17037990},{\"issue_id\":8,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable searchedName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/79.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/xss/\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":80,\"name\":\"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/80\"},\"file_path\":\"/lessons/RoleBasedAccessControl/SearchStaff.jsp\",\"file_name\":\"SearchStaff.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":40,\"finding_category\":{\"id\":20,\"name\":\"Cross-Site Scripting (XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/categories/20\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.lessons.RoleBasedAccessControl.SearchStaff_jsp._jspService\",\"exploitability\":2,\"attack_vector\":\"javax.servlet.jsp.JspWriter.print\",\"file_line_number\":11},\"build_id\":17037990},{\"issue_id\":9,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable searchedName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/79.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/xss/\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":80,\"name\":\"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/80\"},\"file_path\":\"/lessons/CrossSiteScripting/SearchStaff.jsp\",\"file_name\":\"SearchStaff.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":40,\"finding_category\":{\"id\":20,\"name\":\"Cross-Site Scripting (XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/categories/20\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.lessons.CrossSiteScripting.SearchStaff_jsp._jspService\",\"exploitability\":2,\"attack_vector\":\"javax.servlet.jsp.JspWriter.print\",\"file_line_number\":11},\"build_id\":17037990},{\"issue_id\":10,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable menu. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/79.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/xss/\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":80,\"name\":\"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/80\"},\"file_path\":\"/main.jsp\",\"file_name\":\"main.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":54,\"finding_category\":{\"id\":20,\"name\":\"Cross-Site Scripting (XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/categories/20\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.main_jsp._jspService\",\"exploitability\":2,\"attack_vector\":\"javax.servlet.jsp.JspWriter.print\",\"file_line_number\":114},\"build_id\":17037990},{\"issue_id\":11,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable menu. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/79.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/xss/\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":80,\"name\":\"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/80\"},\"file_path\":\"/main.jsp\",\"file_name\":\"main.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":59,\"finding_category\":{\"id\":20,\"name\":\"Cross-Site Scripting (XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/categories/20\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.main_jsp._jspService\",\"exploitability\":2,\"attack_vector\":\"javax.servlet.jsp.JspWriter.print\",\"file_line_number\":135},\"build_id\":17037990},{\"issue_id\":12,\"scan_type\":\"STATIC\",\"description\":\"<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable searchedName. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\\\"https://cwe.mitre.org/data/definitions/79.html\\\">CWE</a> <a href=\\\"https://owasp.org/www-community/attacks/xss/\\\">OWASP</a> <a href=\\\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\\\">Supported Cleansers</a></span>\",\"count\":1,\"context_type\":\"APPLICATION\",\"context_guid\":\"b6d33790-4f9a-40ac-9862-299a3bbeb3fb\",\"violates_policy\":true,\"finding_status\":{\"first_found_date\":\"2022-02-17T16:22:48.673Z\",\"status\":\"OPEN\",\"resolution\":\"UNRESOLVED\",\"mitigation_review_status\":\"NONE\",\"new\":false,\"resolution_status\":\"NONE\",\"last_seen_date\":\"2022-03-01T13:46:29.928Z\"},\"finding_details\":{\"severity\":3,\"cwe\":{\"id\":80,\"name\":\"Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/cwes/80\"},\"file_path\":\"/lessons/SQLInjection/SearchStaff.jsp\",\"file_name\":\"SearchStaff.jsp\",\"module\":\"US1492.ear/WebGoat-5.0.war\",\"relative_location\":40,\"finding_category\":{\"id\":20,\"name\":\"Cross-Site Scripting (XSS)\",\"href\":\"https://api.veracode.com/appsec/v1/categories/20\"},\"procedure\":\"com.veracode.compiledjsp.xUS1492ear.xWebGoat50war.lessons.SQLInjection.SearchStaff_jsp._jspService\",\"exploitability\":2,\"attack_vector\":\"javax.servlet.jsp.JspWriter.print\",\"file_line_number\":11},\"build_id\":17037990}]},\"_links\":{\"self\":{\"href\":\"https://api.veracode.com/appsec/v2/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/findings?violates_policy=true&scan_type=STATIC{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode}\",\"templated\":true},\"application\":{\"href\":\"https://api.veracode.com/appsec/v1/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb\"},\"sca\":{\"href\":\"https://api.veracode.com/appsec/v2/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/findings?violates_policy=true&scan_type=SCA{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode}\",\"templated\":true}},\"page\":{\"size\":500,\"total_elements\":12,\"total_pages\":1,\"number\":0}}"
          },
          "cookies": [],
          "headers": [
            {
              "name": "cache-control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "date",
              "value": "Tue, 15 Mar 2022 21:30:04 GMT"
            },
            {
              "name": "expires",
              "value": "0"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "server",
              "value": "Unknown"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000 ; includeSubDomains"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-conversation-id",
              "value": "ae8d104d-5558-4147-8c16-efd0713194e6"
            },
            {
              "name": "x-frame-options",
              "value": "DENY"
            },
            {
              "name": "x-newrelic-app-data",
              "value": "PxQGU1RaCgIIR1NVDgYPUVMDFB9AMQYAZBBZDEtZV0ZaClc9HjJDEA1YUCIJDUxBXwgNB0VtGAcUQUVWATpMFAI+FwNISFhbUARNCF4PQD5LTVYRFg9RUFEQCA1ZblATDVVLb00ACgxUC1YFSxgcdXYxEEMdUR1SSAYZU19UCQIAVFROGgAbRFZQDlFUBQcDCVMOUwwLVQQRSV8AXRJWPw=="
            },
            {
              "name": "x-xss-protection",
              "value": "1; mode=block"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "Close"
            }
          ],
          "headersSize": 678,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2022-03-15T21:30:03.791Z",
        "time": 667,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 667
        }
      },
      {
        "_id": "37c83ab112d6bef9eeab67cc4d716556",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "user-agent",
              "value": "got (https://github.com/sindresorhus/got)"
            },
            {
              "name": "authorization",
              "value": "[REDACTED]"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "host",
              "value": "api.veracode.com"
            }
          ],
          "headersSize": 472,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [
            {
              "name": "violates_policy",
              "value": "true"
            },
            {
              "name": "size",
              "value": "500"
            },
            {
              "name": "scan_type",
              "value": "DYNAMIC"
            }
          ],
          "url": "https://api.veracode.com/appsec/v2/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/findings?violates_policy=true&size=500&scan_type=DYNAMIC"
        },
        "response": {
          "bodySize": 817,
          "content": {
            "mimeType": "application/json",
            "size": 817,
            "text": "{\"_links\":{\"self\":{\"href\":\"https://api.veracode.com/appsec/v2/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/findings?violates_policy=true&scan_type=DYNAMIC{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode}\",\"templated\":true},\"application\":{\"href\":\"https://api.veracode.com/appsec/v1/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb\"},\"sca\":{\"href\":\"https://api.veracode.com/appsec/v2/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/findings?violates_policy=true&scan_type=SCA{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,include_annot,new,include_exp_date,mitigated_after,sca_scan_mode,sca_dep_mode}\",\"templated\":true}},\"page\":{\"size\":500,\"total_elements\":0,\"total_pages\":0,\"number\":0}}"
          },
          "cookies": [],
          "headers": [
            {
              "name": "cache-control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "date",
              "value": "Mon, 07 Nov 2022 05:27:28 GMT"
            },
            {
              "name": "expires",
              "value": "0"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "server",
              "value": "Unknown"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000 ; includeSubDomains"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-conversation-id",
              "value": "c674fef2-8c83-4bfd-83a7-485327ca20f0"
            },
            {
              "name": "x-frame-options",
              "value": "DENY"
            },
            {
              "name": "x-newrelic-app-data",
              "value": "PxQGU1RaCgIIR1NVDgYPUVMDFB9AMQYAZBBZDEtZV0ZaClc9HjJDEA1YUCIJDUxBXwgNB0VtGAcUQUVWATpMFAI+FwNISFhbUARNCF4PQD5LTVYRFg9RUFEQCA1ZblATDVVLb00ACgxUC1YFSxgcdXYxEEMdUR1SSAYZUFBUCQoAXVROGgAbRFVVVwMEVQZVUVcMAQgJDQERSV8AXRJWPw=="
            },
            {
              "name": "x-xss-protection",
              "value": "1; mode=block"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "Close"
            }
          ],
          "headersSize": 678,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2022-11-07T05:27:26.998Z",
        "time": 365,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 365
        }
      },
      {
        "_id": "5da8c92e168c8c4e1719bba80e9086a0",
        "_order": 0,
        "cache": {},
        "request": {
          "bodySize": 0,
          "cookies": [],
          "headers": [
            {
              "name": "user-agent",
              "value": "got (https://github.com/sindresorhus/got)"
            },
            {
              "name": "authorization",
              "value": "[REDACTED]"
            },
            {
              "name": "accept-encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "host",
              "value": "api.veracode.com"
            }
          ],
          "headersSize": 484,
          "httpVersion": "HTTP/1.1",
          "method": "GET",
          "queryString": [
            {
              "name": "size",
              "value": "500"
            },
            {
              "name": "scan_type",
              "value": "SCA"
            },
            {
              "name": "sca_dep_mode",
              "value": "BOTH"
            },
            {
              "name": "sca_scan_mode",
              "value": "BOTH"
            }
          ],
          "url": "https://api.veracode.com/appsec/v2/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/findings?size=500&scan_type=SCA&sca_dep_mode=BOTH&sca_scan_mode=BOTH"
        },
        "response": {
          "bodySize": 845,
          "content": {
            "mimeType": "application/json",
            "size": 845,
            "text": "{\"_links\":{\"self\":{\"href\":\"https://api.veracode.com/appsec/v2/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/findings?sca_scan_mode=BOTH&sca_dep_mode=BOTH&scan_type=SCA{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,violates_policy,include_annot,new,include_exp_date,mitigated_after}\",\"templated\":true},\"application\":{\"href\":\"https://api.veracode.com/appsec/v1/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb\"},\"non-sca\":{\"href\":\"https://api.veracode.com/appsec/v2/applications/b6d33790-4f9a-40ac-9862-299a3bbeb3fb/findings?sca_scan_mode=BOTH&sca_dep_mode=BOTH&scan_type=STATIC,DYNAMIC,MANUAL{&context,severity,severity_gte,cwe,finding_category,cvss,cvss_gte,cve,violates_policy,include_annot,new,include_exp_date,mitigated_after}\",\"templated\":true}},\"page\":{\"size\":500,\"total_elements\":0,\"total_pages\":0,\"number\":0}}"
          },
          "cookies": [],
          "headers": [
            {
              "name": "cache-control",
              "value": "no-cache, no-store, max-age=0, must-revalidate"
            },
            {
              "name": "content-type",
              "value": "application/json"
            },
            {
              "name": "date",
              "value": "Mon, 07 Nov 2022 05:27:28 GMT"
            },
            {
              "name": "expires",
              "value": "0"
            },
            {
              "name": "pragma",
              "value": "no-cache"
            },
            {
              "name": "server",
              "value": "Unknown"
            },
            {
              "name": "strict-transport-security",
              "value": "max-age=31536000 ; includeSubDomains"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-conversation-id",
              "value": "b4f199ce-05d2-42ee-8314-86ee7ae452e7"
            },
            {
              "name": "x-frame-options",
              "value": "DENY"
            },
            {
              "name": "x-newrelic-app-data",
              "value": "PxQGU1RaCgIIR1NVDgYPUVMDFB9AMQYAZBBZDEtZV0ZaClc9HjJDEA1YUCIJDUxBXwgNB0VtGAcUQUVWATpMFAI+FwNISFhbUARNCF4PQD5LTVYRFg9RUFEQCA1ZblATDVVLb00ACgxUC1YFSxgcdXYxEEMdUR1SSAYZUFBUAQMBUlROGgAbRFIJAwZRA1FTU1NaAQ0KUQMRSV8AXRJWPw=="
            },
            {
              "name": "x-xss-protection",
              "value": "1; mode=block"
            },
            {
              "name": "transfer-encoding",
              "value": "chunked"
            },
            {
              "name": "connection",
              "value": "Close"
            }
          ],
          "headersSize": 678,
          "httpVersion": "HTTP/1.1",
          "redirectURL": "",
          "status": 200,
          "statusText": "OK"
        },
        "startedDateTime": "2022-11-07T05:27:26.998Z",
        "time": 366,
        "timings": {
          "blocked": -1,
          "connect": -1,
          "dns": -1,
          "receive": 0,
          "send": 0,
          "ssl": -1,
          "wait": 366
        }
      }
    ],
    "pages": [],
    "version": "1.2"
  }
}
